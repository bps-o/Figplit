import { useStore } from '@nanostores/react';
import { FormEvent, useCallback, useEffect, useMemo, useState } from 'react';
import { toast } from 'react-toastify';
import { workbenchStore } from '~/lib/stores/workbench';
import { WORK_DIR } from '~/utils/constants';
import { Dialog, DialogButton, DialogDescription, DialogRoot, DialogTitle } from '~/components/ui/Dialog';

interface GitHubUserSummary {
  login: string;
  avatar_url: string;
  name?: string | null;
}

interface GitHubStatusResponse {
  authenticated: boolean;
  user?: GitHubUserSummary;
}

interface CommitResult {
  commitSha: string;
  branch: string;
  pullRequest?: {
    number: number;
    title: string;
    html_url: string;
  } | null;
}

export function GitHubSyncDialog() {
  const open = useStore(workbenchStore.githubDialogOpen);
  const filesState = useStore(workbenchStore.files);
  const unsavedFilesState = useStore(workbenchStore.unsavedFiles);
  const [status, setStatus] = useState<GitHubStatusResponse>({ authenticated: false });
  const [loadingStatus, setLoadingStatus] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<CommitResult | null>(null);
  const [repository, setRepository] = useState('');
  const [baseBranch, setBaseBranch] = useState('main');
  const [newBranch, setNewBranch] = useState(() => `figplit/${Date.now()}`);
  const [commitMessage, setCommitMessage] = useState('Apply Figplit changes');
  const [createPullRequest, setCreatePullRequest] = useState(true);
  const [prTitle, setPrTitle] = useState('Figplit changes');
  const [prBody, setPrBody] = useState('This pull request was generated by Figplit.');

  useEffect(() => {
    let cancelled = false;

    if (!open) {
      setError(null);
      setSuccess(null);
      setIsSubmitting(false);

      return () => {
        cancelled = true;
      };
    }

    async function loadStatus() {
      setLoadingStatus(true);

      try {
        const response = await fetch('/api/github/status');
        const payload = (await response.json()) as GitHubStatusResponse;

        if (!cancelled) {
          setStatus(payload);
        }
      } catch (statusError) {
        console.error(statusError);
      } finally {
        if (!cancelled) {
          setLoadingStatus(false);
        }
      }
    }

    loadStatus();

    return () => {
      cancelled = true;
    };
  }, [open]);

  const handleClose = useCallback(() => {
    workbenchStore.setGitHubDialogOpen(false);
  }, []);

  const changedFiles = useMemo(() => {
    if (!open) {
      return [] as ReturnType<typeof workbenchStore.getChangedFiles>;
    }

    // re-compute whenever the tracked files or unsaved files change
    void filesState;
    void unsavedFilesState;

    return workbenchStore.getChangedFiles();
  }, [open, filesState, unsavedFilesState]);

  const formattedFiles = useMemo(() => {
    return changedFiles.map((file) => ({
      ...file,
      relativePath: toRelativePath(file.path),
    }));
  }, [changedFiles]);

  const handleConnect = () => {
    const redirectTo = window.location.pathname + window.location.search;
    window.location.href = `/auth/github?redirectTo=${encodeURIComponent(redirectTo)}`;
  };

  const handleDisconnect = async () => {
    try {
      await fetch('/api/github/logout', { method: 'POST' });
      setStatus({ authenticated: false });
      setSuccess(null);
      setError(null);
    } catch (logoutError) {
      setError(logoutError instanceof Error ? logoutError.message : 'Failed to disconnect GitHub');
    }
  };

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();

    if (!status.authenticated) {
      setError('Connect your GitHub account before syncing.');
      return;
    }

    setError(null);
    setSuccess(null);
    setIsSubmitting(true);

    try {
      await workbenchStore.saveAllFiles();

      const updatedFiles = workbenchStore.getChangedFiles();

      if (updatedFiles.length === 0) {
        throw new Error('There are no saved file changes to sync.');
      }

      const hasBinary = updatedFiles.some((file) => file.isBinary);

      if (hasBinary) {
        throw new Error('GitHub sync currently supports text files only.');
      }

      const payload = {
        repository: repository.trim(),
        baseBranch: baseBranch.trim(),
        newBranch: newBranch.trim(),
        commitMessage: commitMessage.trim(),
        prTitle: createPullRequest ? prTitle.trim() : undefined,
        prBody: createPullRequest ? prBody : undefined,
        files: updatedFiles.map((file) => ({
          path: toRelativePath(file.path),
          content: file.content,
          encoding: 'utf-8' as const,
        })),
      };

      if (!payload.repository || !payload.baseBranch || !payload.newBranch || !payload.commitMessage) {
        throw new Error('Repository, branches, and commit message are required.');
      }

      const response = await fetch('/api/github/commit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const message = await response.json().catch(() => undefined);
        const errorMessage = typeof message?.error === 'string' ? message.error : 'GitHub sync failed.';
        throw new Error(errorMessage);
      }

      const result = (await response.json()) as CommitResult;
      setSuccess(result);
      toast.success('GitHub sync completed');
      workbenchStore.resetAllFileModifications();
    } catch (submitError) {
      const message = submitError instanceof Error ? submitError.message : 'Failed to sync with GitHub.';
      setError(message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <DialogRoot open={open}>
      <Dialog onBackdrop={handleClose} onClose={handleClose} className="max-w-2xl">
        <DialogTitle>GitHub sync</DialogTitle>
        <DialogDescription>
          <div className="space-y-4 text-sm leading-relaxed">
            <p>Connect your GitHub account to push the latest Figplit changes into a repository.</p>
            {loadingStatus && <p>Checking GitHub connectionâ€¦</p>}
            {!loadingStatus && !status.authenticated && (
              <div className="rounded border border-bolt-elements-borderColor bg-bolt-elements-background-depth-2 p-3 text-sm">
                <p className="mb-2 font-medium text-bolt-elements-textPrimary">No GitHub account connected.</p>
                <p className="text-bolt-elements-textSecondary">
                  Authenticate with GitHub to create branches, commits, and optional pull requests based on your current
                  workspace.
                </p>
                <div className="mt-3 flex justify-end">
                  <DialogButton type="primary" onClick={handleConnect}>
                    Connect GitHub
                  </DialogButton>
                </div>
              </div>
            )}
            {status.authenticated && status.user && (
              <div className="flex items-center justify-between rounded border border-bolt-elements-borderColor bg-bolt-elements-background-depth-2 p-3">
                <div className="flex items-center gap-3">
                  <img
                    src={status.user.avatar_url}
                    alt={status.user.login}
                    className="h-10 w-10 rounded-full border border-bolt-elements-borderColor"
                  />
                  <div className="leading-tight">
                    <p className="font-medium text-bolt-elements-textPrimary">
                      {status.user.name ?? status.user.login}
                    </p>
                    <p className="text-xs text-bolt-elements-textSecondary">@{status.user.login}</p>
                  </div>
                </div>
                <DialogButton type="secondary" onClick={handleDisconnect}>
                  Disconnect
                </DialogButton>
              </div>
            )}
            {status.authenticated && (
              <form onSubmit={handleSubmit} className="space-y-3">
                <div className="grid gap-3 md:grid-cols-2">
                  <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                    <span>Repository (owner/name)</span>
                    <input
                      className="w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                      placeholder="your-org/landing-page"
                      value={repository}
                      onChange={(event) => setRepository(event.target.value)}
                    />
                  </label>
                  <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                    <span>Base branch</span>
                    <input
                      className="w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                      placeholder="main"
                      value={baseBranch}
                      onChange={(event) => setBaseBranch(event.target.value)}
                    />
                  </label>
                  <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                    <span>New branch</span>
                    <input
                      className="w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                      placeholder="figplit/update-homepage"
                      value={newBranch}
                      onChange={(event) => setNewBranch(event.target.value)}
                    />
                  </label>
                  <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                    <span>Commit message</span>
                    <input
                      className="w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                      placeholder="Update hero section"
                      value={commitMessage}
                      onChange={(event) => setCommitMessage(event.target.value)}
                    />
                  </label>
                </div>
                <div className="space-y-2 rounded border border-bolt-elements-borderColor p-3">
                  <label className="flex items-center gap-2 text-sm font-medium text-bolt-elements-textPrimary">
                    <input
                      type="checkbox"
                      checked={createPullRequest}
                      onChange={(event) => setCreatePullRequest(event.target.checked)}
                    />
                    Create pull request
                  </label>
                  {createPullRequest && (
                    <div className="grid gap-3">
                      <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                        <span>Pull request title</span>
                        <input
                          className="w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                          placeholder="Update landing page"
                          value={prTitle}
                          onChange={(event) => setPrTitle(event.target.value)}
                        />
                      </label>
                      <label className="space-y-1 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                        <span>Pull request description</span>
                        <textarea
                          className="min-h-[100px] w-full rounded border border-bolt-elements-borderColor bg-transparent p-2 text-sm text-bolt-elements-textPrimary"
                          value={prBody}
                          onChange={(event) => setPrBody(event.target.value)}
                        />
                      </label>
                    </div>
                  )}
                </div>
                <div className="rounded border border-dashed border-bolt-elements-borderColor p-3">
                  <p className="mb-2 text-xs font-medium uppercase tracking-wide text-bolt-elements-textSecondary">
                    Changed files
                  </p>
                  {formattedFiles.length === 0 ? (
                    <p className="text-sm text-bolt-elements-textSecondary">
                      Save your edits to include them in the GitHub sync.
                    </p>
                  ) : (
                    <ul className="space-y-1 text-sm">
                      {formattedFiles.map((file) => (
                        <li key={file.path} className="flex items-center justify-between">
                          <span className="truncate text-bolt-elements-textPrimary">{file.relativePath}</span>
                          {file.isBinary && (
                            <span className="text-xs uppercase tracking-wide text-amber-500">Binary</span>
                          )}
                        </li>
                      ))}
                    </ul>
                  )}
                  {unsavedFilesState.size > 0 && (
                    <p className="mt-2 text-xs text-amber-500">
                      {unsavedFilesState.size} unsaved {unsavedFilesState.size === 1 ? 'file needs' : 'files need'} to
                      be saved before syncing.
                    </p>
                  )}
                </div>
                {error && <p className="text-sm text-rose-500">{error}</p>}
                {success && (
                  <div className="rounded border border-emerald-500/40 bg-emerald-500/10 p-3 text-sm text-emerald-200">
                    <p className="font-medium text-emerald-100">Changes synced to GitHub.</p>
                    <p className="mt-1">Branch: {success.branch}</p>
                    <p className="truncate text-xs text-emerald-200/80">Commit: {success.commitSha}</p>
                    {success.pullRequest && (
                      <a
                        href={success.pullRequest.html_url}
                        className="mt-2 inline-flex items-center gap-1 text-xs font-medium text-emerald-200 underline"
                        target="_blank"
                        rel="noreferrer"
                      >
                        View pull request #{success.pullRequest.number}
                        <span className="i-ph:arrow-square-out-duotone text-xs" />
                      </a>
                    )}
                  </div>
                )}
                <div className="flex justify-end gap-2 pt-2">
                  <DialogButton
                    type="secondary"
                    onClick={(event) => {
                      event.preventDefault();
                      handleClose();
                    }}
                    disabled={isSubmitting}
                  >
                    Close
                  </DialogButton>
                  <DialogButton type="primary" disabled={isSubmitting}>
                    <span className="inline-flex items-center gap-2">
                      {isSubmitting && <span className="i-svg-spinners:90-ring-with-bg text-base" />}
                      <span>{isSubmitting ? 'Syncingâ€¦' : 'Sync with GitHub'}</span>
                    </span>
                  </DialogButton>
                </div>
              </form>
            )}
          </div>
        </DialogDescription>
      </Dialog>
    </DialogRoot>
  );
}

function toRelativePath(path: string) {
  if (path.startsWith(`${WORK_DIR}/`)) {
    return path.slice(WORK_DIR.length + 1);
  }

  if (path.startsWith(WORK_DIR)) {
    return path.slice(WORK_DIR.length);
  }

  return path;
}
